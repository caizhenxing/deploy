server {

listen *:80;

server_name localhost;

location /status {
  stub_status on;
  access_log   off;
  allow   127.0.0.1;
  deny    all;
  }

}


server {

    listen *:80 default_server;
    server_name  ~^(10.1.*)$ ;
    
    root /var/www/syspages;
    

    location = /check.php {
    	try_files $uri $uri/ ;
    	fastcgi_pass unix:/var/run/php5-fpm.sock;
    	include fastcgi_params;
    	fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
    	access_log   off;
    }

}


server {

    listen *:80;
    server_name  127.0.0.1;
     
    location /pmstatus {
        access_log off;
        allow 127.0.0.1;
        deny all;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_pass unix:/var/run/php5-fpm.sock;
    }


}

<% if (@fqdn == "essay.test") %>
server {
    listen *:80;
    server_name phpmemcachedadmin.test;
    access_log /var/log/nginx/phpmemcachedadmin-access.log;
    error_log /var/log/nginx/phpmemcachedadmin-error.log;
    root /var/www/phpMemcachedAdmin;
    index index.php;

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }
}
<% end %>

server {

        listen       80;
        server_name ~^img[0-9]\.(?P<project>.+)$;

        access_log /var/log/nginx/access.log main;
        access_log syslog:server=graylog-local.uncomp.com:12301 graylog2_format;


        location ~* ^/(.*) {

                expires 30d;
                limit_req zone=static burst=100 nodelay; 
                add_header Access-Control-Allow-Origin *;


                set $s3_bucket        'essays-images.s3.amazonaws.com';
                set $url_full         '$1';

                proxy_set_header       Host $s3_bucket;
                proxy_set_header       Authorization '';
                proxy_hide_header      x-amz-id-2;
                proxy_hide_header      x-amz-request-id;
                proxy_hide_header      Set-Cookie;
                proxy_ignore_headers   "Set-Cookie";
                proxy_intercept_errors on;

                proxy_cache            cache;
                proxy_cache_valid      200 24h;
                proxy_cache_valid      403 15m;
                proxy_cache_bypass     $http_cache_purge;
                add_header             X-Cached $upstream_cache_status;

                proxy_http_version     1.1;
                proxy_set_header       Connection "";
                proxy_pass             http://$s3_bucket/img.$project/$url_full;


            }


}


server {
    listen 80;
    charset utf-8;
    server_name ~^(?P<w>www)\.(?P<project>.+)$;


set $is_https "";
set $wwwdir "";
set $projdir "";
set $project_force_ssl "";
set $www_force_ssl "";

#### checking for https headers from ELB
    if ( $http_x_forwarded_proto = "https" ) {
	set $is_https "on";
    }

#### checking if www.$project_name dir exists

    if (!-d /var/www/html/$w.$project/web) {
	set $wwwdir 'nowwwdir';
    }

#### checking if $project_name dir exists

    if (!-d /var/www/html/$project/web) {
	set $projdir 'noprojectdir';
    }


#### multiple condition - if ( ! $wwwdir && ! projdir ) then "site not found" 
    set $wwwdir_projdir "$wwwdir::$projdir";

    if ($wwwdir_projdir = "nowwwdir::noprojectdir"){
	rewrite ^(.*)$ /notfound.html break;
    }


#### checking if force_ssl flag is present in project or www.project dir

    if ( -f /var/www/html/$project/force_ssl ){
	set $project_force_ssl "true";
    }

    if ( -f /var/www/html/$w.$project/force_ssl ){
	set $www_force_ssl "true";
    }


#### if ( !$wwwdir ) - redirect to http or https project site depending on force_ssl flag set and current connection state - SSL/not SSL
    set $wwwdir_project_force_ssl "$wwwdir::$project_force_ssl"; 
    set $wwwdir_is_https "$wwwdir::$is_https"; 


    if ($wwwdir_project_force_ssl = "nowwwdir::true"){
	return 301 https://$project$request_uri;
	break;
    }

    if ($wwwdir_is_https = "nowwwdir::on"){
	return 301 https://$project$request_uri;
	break;
    }


    if ($wwwdir_project_force_ssl = "nowwwdir::"){
	return 301 http://$project$request_uri;
	break;
    }


#### redirecting to https://www.project if force_ssl flag is set and there is no SSL header from ELB

    set $is_https_www_force_ssl "$is_https::$www_force_ssl";

    if ($is_https_www_force_ssl = "::true"){
	return 301 https://$w.$project$request_uri;
	break;
    }
    

    root /var/www/html/$w.$project/web;
    include conf.d/default.loc; 

}



server {
    listen 80;
    charset utf-8;
    server_name ~^(?P<project>.+)$;


set $is_https "";
set $wwwdir "";
set $projdir "";
set $project_force_ssl "";
set $www_force_ssl "";
set $www_dir_exists "";


#### checking for https headers from ELB

    if ( $http_x_forwarded_proto = "https" ) {
	set $is_https "on";
    }

#### checking for force_ssl flags
    if ( -f /var/www/html/www.$project/force_ssl ){
	set $www_force_ssl "true";
    }

    if ( -f /var/www/html/$project/force_ssl ){
	set $project_force_ssl "true";
    }

#### checking if www.$projectname directory exists
    if (-d /var/www/html/www.$project/web) {
	set $www_dir_exists "true";
    }

#### if ($www_dir_exists) redirecting to http or https $projectname site depending on force_ssl flag and current ssl/not ssl connection

    set $www_dir_exists_www_force_ssl "$www_dir_exists::$www_force_ssl";
    set $www_dir_exists_is_https "$www_dir_exists::$is_https";

    if ($www_dir_exists_www_force_ssl = "true::true") {
	return 301 https://www.$project$request_uri;
	break;
    }

    if ($www_dir_exists_is_https = "true::on") {
	return 301 https://www.$project$request_uri;
	break;    
    }

    if ($www_dir_exists_www_force_ssl = "true::") {
	return 301 http://www.$project$request_uri;
	break;    
    }


#### checking if project dir exists. if not then site not found
    if ( !-d /var/www/html/$project/web){
        rewrite ^(.*)$ /notfound.html break;
    }

#### redirecting if no SSL header from ELB and force_ssl enabled

    set $is_https_project_force_ssl "$is_https::$project_force_ssl";

    if ($is_https_project_force_ssl = "::true"){
	return 301 https://$project$request_uri;
	break;    
	
    }



    root /var/www/html/$project/web;
    include conf.d/default.loc;
}







